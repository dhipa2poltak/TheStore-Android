apply plugin: 'jacoco'

jacoco {
  toolVersion '0.8.11'
}

tasks.withType(Test).configureEach {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}

private static boolean isAndroidModule(Project project) {
  boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
  boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
  return isAndroidLibrary || isAndroidApp
}

afterEvaluate { project ->
  def projectName = project.name
  if (isAndroidModule(project))
    setupAndroidReporting()
  else
    setupKotlinReporting()
}

def setupKotlinReporting() {
  jacocoTestReport {
    dependsOn test

    reports {
      html.required.set(true)
      xml.required.set(true)
    }

    afterEvaluate {
      classDirectories.from = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
            // dagger
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
        ])
      })
    }
  }
}

def setupAndroidReporting() {

  def buildTypes = android.buildTypes.collect { type ->
    type.name
  }

  def productFlavors = android.productFlavors.collect { flavor ->
    flavor.name
  }

  // When no product flavors defined, use empty
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }
      def testTaskName = "test${sourceName.capitalize()}UnitTest"
      System.out.println("Task -> $testTaskName")

      // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
      task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        reports {
          html.required.set(true)
          xml.required.set(true)
        }

        def fileFilter = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/databinding/*',
            '**/BR.*',
            '**/DataBinding*.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // dagger
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            'hilt*',
            'dagger*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
            '**/*Fragment.*',
            '**/*Fragment*.*',
            '**/*Activity.*',
            '**/*Activity*.*',
            '**/*Adapter.*',
            '**/*Adapter*.*',
            '**/TheApplication*.*',
            '**/framework/Config.*',
            '**/DefaultOnlineChecker*.*'
        ]

        def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
        def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)

        classDirectories.from = files([javaTree], [kotlinTree])

        executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        def coverageSourceDirs = [
            "src/main/java",
            "src/$productFlavorName/java",
            "src/$buildTypeName/java"
        ]

        sourceDirectories.setFrom(files(coverageSourceDirs))
        additionalSourceDirs.setFrom(files(coverageSourceDirs))
      }
    }
  }
}
